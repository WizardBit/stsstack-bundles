#!/bin/bash
# Global variables are first defined in 00setup and module
# dependencies are defined in 01import-config-defaults
#
# All overlay/bundle variables (MOD_PARAMS) defaults must go into
# the <module>/module_defaults file.

# Needed in all cases
MOD_OVERLAYS+=( "keystone.yaml" )

# NOTE: this is (should be) the same across all modules using mysql
if has_min_series focal; then
    # There is no Focal support for percona-cluster
    MOD_PARAMS[__NUM_MYSQL_UNITS__]=3
    MOD_OVERLAYS+=( "mysql-innodb-cluster.yaml")
else
    MOD_OVERLAYS+=( "mysql.yaml" )
fi

# Skip processing input if it includes exclusive passthrough options
! has_excl_passthrough_opt && \
while (($# > 0))
do
    case "$1" in
        --graylog-channel)  #__OPT__type:<str>
            MOD_PARAMS[__GRAYLOG_SNAP_CHANNEL__]="$2"
            shift
            ;;
        --graylog)
            MOD_OVERLAYS+=( "graylog.yaml ")
            ;;
        --grafana-channel)  #__OPT__type:<str>
            MOD_PARAMS[__GRAFANA_SNAP_CHANNEL__]="$2"
            shift
            ;;
        --lma)
            # Logging Monitoring and Analysis
            MOD_OVERLAYS+=( "graylog.yaml ")
            MOD_OVERLAYS+=( "grafana.yaml ")
            MOD_MSGS[lma.0]="need to manually relate filebeat (graylog) to any services you want to monitor"
            MOD_MSGS[lma.1]="need to manually relate telegraf (grafana) to any services you want to monitor"
            ;;
        --num-mons|--num-ceph-mons)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_CEPH_MON_UNITS__]=$2
            shift
            ;;
        --ssl)
            (cd ssl; . ./create_ca_cert.sh $MOD_SSL_STATE_DIR;)
            ssl_results="ssl/$MOD_SSL_STATE_DIR/results"
            MOD_PARAMS[__SSL_CA__]=`base64 ${ssl_results}/cacert.pem| tr -d '\n'`
            MOD_PARAMS[__SSL_CERT__]=`base64 ${ssl_results}/servercert.pem| tr -d '\n'`
            MOD_PARAMS[__SSL_KEY__]=`base64 ${ssl_results}/serverkey.pem| tr -d '\n'`
            # Make everything HA with 1 unit (unless --ha has already been set)
            if ! has_opt '--rgw-ha[:0-9]*$'; then
                set -- $@ --rgw-ha:1 && cache $@
            fi
            ;;
        --rgw|--ceph-rgw)
            MOD_OVERLAYS+=( "ceph-rgw.yaml" )
            ;;
        --rgw-ha*|--ceph-rgw-ha*)
            get_units $1 __NUM_CEPH_RGW_UNITS__ 3
            MOD_OVERLAYS+=( "ceph-rgw.yaml" )
            MOD_OVERLAYS+=( "ceph-rgw-ha.yaml" )
            ;;
        --rgw-multisite|--ceph-rgw-multisite)
            MOD_OVERLAYS+=( "ceph-rgw.yaml" )
            MOD_OVERLAYS+=( "ceph-rgw-multisite.yaml" )
            ;;
        --rgw-multisite-ha*|--ceph-rgw-multisite*)
            get_units $1 __NUM_CEPH_RGW_UNITS__ 3
            MOD_OVERLAYS+=( "ceph-rgw.yaml" )
            MOD_OVERLAYS+=( "ceph-rgw-ha.yaml" )
            MOD_OVERLAYS+=( "ceph-rgw-multisite.yaml" )
            ;;
        --vault)
            assert_min_release queens "vault" $@
            MOD_OVERLAYS+=( "vault.yaml" )
            MOD_OVERLAYS+=( "vault-ceph.yaml" )
            ;;
        --etcd-channel)  #__OPT__type:<str>
            MOD_PARAMS[__ETCD_SNAP_CHANNEL__]=$2
            shift
            ;;
        --vault-ha*)
            get_units $1 __NUM_VAULT_UNITS__ 3
            get_units $1 __NUM_ETCD_UNITS__ 3
            MOD_OVERLAYS+=( "vault-ha.yaml" )
            MOD_OVERLAYS+=( "etcd.yaml" )
            MOD_OVERLAYS+=( "easyrsa.yaml" )
            MOD_OVERLAYS+=( "etcd-easyrsa.yaml" )
            MOD_OVERLAYS+=( "vault-etcd.yaml" )
            set -- $@ --vault && cache $@
            ;;
        --ceph-proxy)
            MOD_PARAMS[__CEPH_INTERFACE__]='ceph-proxy'
            MOD_OVERLAYS+=( "ceph-proxy.yaml" )
            MOD_MSGS[ceph-proxy.0]="once ceph is ready, do 'juju config admin-key=<key> fsid=<fsid> monitor-hosts=<mon-addr-list>'"
            MOD_MSGS[ceph-proxy.1]="e.g. juju config ceph-proxy admin-key=AQALEzleKLCNDBAAxrOY8WbxF2B7lDx0TaswGA== fsid=e5e6aee2-4719-11ea-8264-fa163e50d5d1 monitor-hosts='10.5.0.11:6789 10.5.0.12:6789 10.5.0.13:6789'"
            ;;
        --ceph-fs)
            assert_min_release ocata "ceph-mds"
            MOD_OVERLAYS+=( "ceph-fs.yaml" )
            ;;
        --ceph-fs-ha*)
            assert_min_release ocata "ceph-mds"
            get_units $1 __NUM_CEPH_FS_UNITS__ 3
            MOD_OVERLAYS+=( "ceph-fs.yaml" )
            ;;
       --ceph-iscsi)
            assert_min_release ussuri "ceph-iscsi"
            MOD_OVERLAYS+=( "ceph-iscsi.yaml" )
            ;;
        --num-osds-per-host)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_OSDS_PER_HOST__]=$2
            shift
            ;;
        *)
            echo "ERROR: invalid input '$1'"
            _usage
            exit 1
            ;;
    esac
    shift
done

app_release_name=`get_app_release_name "$release"`
target=${series}-${release}
[ -z "$pocket" ] || target=${target}-$pocket
target=$target/$app_release_name
MOD_PASSTHROUGH_OPTS+=( --release-name $target )

