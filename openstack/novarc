#!/bin/bash -eu
juju_status_json_cache=`mktemp`
cleanup () { rm -rf $juju_status_json_cache; }
trap cleanup EXIT KILL

# cache juju status
juju status --format=json > $juju_status_json_cache

_OS_PARAMS=$(env | awk 'BEGIN {FS="="} /^OS_/ {print $1;}' | paste -sd ' ')
for param in $_OS_PARAMS; do
    unset $param
done

keystone_addr=`juju config keystone vip`
if [ -z "$keystone_addr" ]; then
    keystone_addr=`jq -r '.applications.keystone.units."keystone/0"."public-address"' $juju_status_json_cache`
fi

# config-based ssl
ssl_cert=`juju config keystone ssl_cert`
if [ -n "$ssl_cert" ]; then
  export OS_AUTH_PROTOCOL=https
else
    # Vault-based ssl
    if ((`jq -r '.applications[]| select(."charm-name"=="vault")' $juju_status_json_cache| wc -l`)); then
        if `jq -r .applications.vault.relations.certificates[] $juju_status_json_cache| grep -q keystone`; then
            export OS_AUTH_PROTOCOL=https
        fi
    fi
fi

unset _OS_PARAMS
export OS_USERNAME=admin
export OS_PASSWORD=openstack
export OS_PROJECT_NAME=admin
export OS_REGION_NAME=RegionOne

api_ver="`juju config keystone preferred-api-version`"
rel="`juju config keystone openstack-origin| sed -r 's/.+-(.+)/\1/g'`"
rel="`echo -e "$rel\nqueens"| sort| head -n 1`"
series=`jq -r '.applications| to_entries[]| select(.key=="keystone")| .value| .series' $juju_status_json_cache`
if [ "$api_ver" = "3" ] || [[ "${rel%%/*}" > "pike" ]] || \
    { [[ "$series" > "artful" ]] && [[ "$series" < "trusty" ]]; }; then
export OS_AUTH_URL=${OS_AUTH_PROTOCOL:-http}://${keystone_addr}:5000/v3
export OS_PROJECT_DOMAIN_NAME=admin_domain
export OS_USER_DOMAIN_NAME=admin_domain
export OS_IDENTITY_API_VERSION=3
else
export OS_AUTH_URL=${OS_AUTH_PROTOCOL:-http}://${keystone_addr}:5000/v2.0
fi
