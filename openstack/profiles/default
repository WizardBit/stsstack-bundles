#!/bin/bash

set -ex

. ./profiles/common

install_packages

# Set sts-stack overrides, if not already set.
[[ -z "$NAMESERVER" ]] && export NAMESERVER="10.230.64.2"
[[ -z "$SWIFT_IP" ]] && export SWIFT_IP="10.230.19.58"

# Set serverstack defaults, if not already set.
[[ -z "$GATEWAY" ]] && export GATEWAY="10.5.0.1"
[[ -z "$CIDR_EXT" ]] && export CIDR_EXT="10.5.0.0/16"
[[ -z "$FIP_RANGE" ]] && export FIP_RANGE="10.5.150.0:10.5.200.254"
[[ -z "$NAMESERVER" ]] && export NAMESERVER="10.245.168.6"
[[ -z "$CIDR_PRIV" ]] && export CIDR_PRIV="192.168.21.0/24"
[[ -z "$SWIFT_IP" ]] && export SWIFT_IP="10.245.161.162"

NS_ARG=""
[ "`juju config neutron-api enable-ml2-dns`" = "true" ] && unset NAMESERVER || NS_ARG="-N $NAMESERVER"

# Accept network type as first parameter, assume gre if unspecified
net_type=${1:-"gre"}

# add extra port to overcloud neutron-gateway (if exists) and configure charm to use it
if ((`juju status neutron-gateway --format=json| jq .machines[]| wc -l`)); then
    source ~/novarc
    ./bin/post-deploy-config neutron-gateway
fi

# Configure neutron networking on overcloud
source novarc

if is_ksv3; then
  ./bin/neutron-ext-net-ksv3 --project admin --network-type flat -g $GATEWAY -c $CIDR_EXT -f $FIP_RANGE ext_net
  ./bin/neutron-tenant-net-ksv3 --project admin --network-type $net_type -r provider-router $NS_ARG private $CIDR_PRIV
  # Create demo/testing users, tenants and flavor
  create_tempest_users_v3
else
  ./bin/neutron-ext-net --network-type flat -g $GATEWAY -c $CIDR_EXT -f $FIP_RANGE ext_net
  ./bin/neutron-tenant-net --network-type $net_type -t admin -r provider-router $NS_ARG private $CIDR_PRIV
  # Create demo/testing users, tenants and flavor
  create_tempest_users
fi

# Download images if not already present
mkdir -vp ~/images
#upload_image cloudimages trusty trusty-server-cloudimg-amd64-disk1.img &
upload_image cloudimages xenial xenial-server-cloudimg-amd64-disk1.img &
upload_image cloudimages bionic bionic-server-cloudimg-amd64.img &
upload_image swift cirros cirros-0.4.0-x86_64-disk.img &
upload_image swift cirros2 cirros-0.3.5-x86_64-disk.img &
wait

# Set properties needed by octavia-disk-image-retrofit (See LP: #1842430) - we only do Bionic for now since that's the only one supported.
img_file=bionic-server-cloudimg-amd64.img
img_name=bionic
ts=`stat ~/images/$img_file| sed -r 's/Modify:\s+([[:digit:]-]+)\s+.+/\1/g;t;d'| tr -d '-'`
declare -A props=( [architecture]=x86_64
                   [os_distro]='ubuntu'
                   [os_version]='18.04'
                   [version_name]="$ts"
                   [product_name]="com.ubuntu.cloud:server:18.04:amd64"
)
for p in ${!props[@]}; do 
  openstack image set --property $p=${props[$p]} $img_name &
done
wait

# TODO: remove fallbacks once we move to queens (they are there for clients still on ocata)
image_id=$(openstack image list --name cirros -f value -c ID 2>/dev/null || openstack image list| awk '$4=="cirros" {print $2}')
image_alt_id=$(openstack image list --name cirros2 -f value -c ID 2>/dev/null || openstack image list| awk '$4=="cirros2" {print $2}')

echo "Flavors"
create_tempest_flavors
create_default_flavors

# Gather vars for tempest template
# TODO: remove fallbacks once we move to queens (they are there for clients still on ocata)
ext_net=$(openstack network list --name ext_net -f value -c ID 2>/dev/null || openstack network list| awk '$4=="ext_net" {print $2}')
router=$(openstack router list --name provider-router -f value -c ID 2>/dev/null || openstack router list| awk '$4=="provider-router" {print $2}')
keystone=$(juju run --unit keystone/0 unit-get private-address)
dashboard=$(juju run --unit openstack-dashboard/0 unit-get private-address)
ncc=$(juju run --unit nova-cloud-controller/0 unit-get private-address)
http=${OS_AUTH_PROTOCOL:-http}
if is_ksv3; then
  default_domain_id=$(openstack domain list | awk '/default/ {print $2}')
fi

# Insert vars into tempest conf
if is_ksv3; then
sed -e "s/__IMAGE_ID__/$image_id/g" -e "s/__IMAGE_ALT_ID__/$image_alt_id/g" \
    -e "s/__DASHBOARD__/$dashboard/g" -e "s/__KEYSTONE__/$keystone/g" \
    -e "s/__EXT_NET__/$ext_net/g" -e "s/__PROTO__/$http/g" \
    -e "s/__SWIFT__/$SWIFT_IP/g" \
    -e "s/__NAMESERVER__/$NAMESERVER/g" \
    -e "s/__CIDR_PRIV__/${CIDR_PRIV////\\/}/g" \
    -e "s/__NCC__/$ncc/g" \
    -e "s/__DEFAULT_DOMAIN_ID__/$default_domain_id/g" \
    templates/tempest/tempest-v3.conf.template > tempest.conf
else
sed -e "s/__IMAGE_ID__/$image_id/g" -e "s/__IMAGE_ALT_ID__/$image_alt_id/g" \
    -e "s/__DASHBOARD__/$dashboard/g" -e "s/__KEYSTONE__/$keystone/g" \
    -e "s/__EXT_NET__/$ext_net/g" -e "s/__PROTO__/$http/g" \
    -e "s/__SWIFT__/$SWIFT_IP/g" \
    -e "s/__NAMESERVER__/$NAMESERVER/g" \
    -e "s/__CIDR_PRIV__/${CIDR_PRIV////\\/}/g" \
    -e "s/__NCC__/$ncc/g" \
    templates/tempest/tempest.conf.template > tempest.conf
fi

# Git tempest, place the rendered tempest template
[ -d tempest ] || git clone https://github.com/openstack/tempest
git --git-dir=tempest/.git --work-tree=tempest checkout master
git --git-dir=tempest/.git --work-tree=tempest pull
cp tempest.conf tempest/etc
cp templates/tempest/accounts.yaml tempest/etc
