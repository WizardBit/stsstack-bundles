#!/bin/bash
declare -a CACHED_STDIN=( $@ )
declare -A MASTER_OPTS=(
    [CHARM_CHANNEL]=stable
    [MODEL_CONFIG]=''
    [BUNDLE_NAME]=''
    [CLOUD_NAME]=''
    [TARGET_RELEASE_NAME]=''
    [VIP_ADDR_START]=10.5.100.0
    [CHARM_REVISIONS]=
)
DEFAULT_SERIES=bionic
JUJU_VERSION="`juju --version 2>/dev/null| sed -r 's/^([[:digit:]\.]+).*/\1/g'`"
JUJU_DEPLOY_OPTS=""

. $MOD_DIR/common/openstack_release_info

list_module_opts ()
{
    local script=$MOD_DIR/pipeline/02configure

    echo -e "\nMODULE OPTS:"
    grep __OPT__ $script| \
        sed -r -e 's/.+\s+(--[[:alnum:]\-]+).+#__OPT__type:(.+)/      \1 \2/g' \
               -e 's/.+\s+(--[[:alnum:]\-]+).+#__OPT__$/      \1/g;t;d'| sort -k 1
}

list_overlays ()
{
    echo "Supported overlays:"
    local script=$MOD_DIR/pipeline/02configure
    {
    grep -v __OPT__ $script| \
        sed -r 's/.+\s+(--[[:alnum:]\-]+\*?)[\)\|].*/\1/g;t;d'
    grep -v __OPT__ $script| \
        sed -r 's/.+\|(--[[:alnum:]\-]+\*?)\).*/\1/g;t;d'
    } | sort -u
}

_usage () {
    cat << EOF
USAGE: `basename $0` OPTIONS [OVERLAYS] [MODULE_OPTS]

OPTIONS:
     --charm-channel
        Charm channel to deploy from (if supported). Be aware that this
        applies to all charms being deployed which means they must all
        have a release available in the channel specified.
     --create-model
        Create Juju model using --name. Switches to model if it already
        exists. If this is not provided then the current Juju model is used.
     --debug
        Enable bash debug logging.
     --defaults
        Use module config defaults and don't ask for input.
     -h, --help
        Display this help message.
     --list
        List existing bundles.
     --list-overlays
        List supported overlays.
     --model-config
        Juju model config <key>=<value> (can be provided multiple times).
     -n, --name n
        Name for bundle. If this is not provided then the default bundle
        location is used. This is also used as the name of the model when
        using --create-model. To specify the cloud name as well, the name
        should be in format <model-name>:<cloud-name>
     -p, --pocket p
        Archive pocket to install packages from e.g. "proposed". Default is
        main.
     -r, --release r
        Openstack release. This allows UCA to be installed and used otherwise
        you get the release shipped with the version of Ubuntu you are using.
        Note that this only applies to LTS releases of Ubuntu.
     --replay
        Replay last command for bundle --name (or default bundle if no name
        provided). This skips the regeneration of a bundle if for example you
        want to re-run an existing one that has perhaps been manually
        modified.
     --run
        Go ahead and Juju deploy the generate bundle.
     -s, --series s
        Ubuntu series.
    --use-stable-charms
        By default the development (cs:~openstack-charmers-next) version of
        Openstack charms are used where available. Use this flag if you want to
        use the stable (released) charms i.e. cs:<charm>.
    --revision-info
        Path to a yaml-format bundle file that will be used to pin charms to
        specific versions. This will automatically switch to using stable
        charms (since versions are assumed to come from stable charms).
    --vip-addr-start
        Address a.b.c.d from which to start allocating virtual ip addresses used
        for deployed services. There must be enough addresses beyond this one to
        accomodate for all VIPs needed in the deployment. Default is ${MASTER_OPTS[VIP_ADDR_START]}.

OVERLAYS:
     You can optionally add one or more feature overlay. These are
     specified as --<overlayname> using the name of an overlay as found in
     the output of running ./generate-bundle.sh --list-overlays.

     Note that overlays listed with an asterisk at the end of the name
     support having a number of units specified using a colon e.g.

     ./generate-bundle.sh --myoverlay:6

     will give you num_units:6 in myoverlay. This is useful for overlays
     that provide HA or scale-out services. See --list-overlays for
     available overlays.
EOF
    list_module_opts
}

update_master_opts ()
{
    # Parse master cli opts to catch any additions or updates.
    # This is typically called after the module opts have been
    # processed and it is therefore not expected/allowed that there
    # are unknown opts.
    ERROR_ON_UNKNOWN_OPT=true
    filter_master_opts $@
}

declare -a FILTERED=()
filter_master_opts ()
{
    # Parses command line input and filters out "master" opts i.e. not
    # module-specific opts (that get parsed in their respective module)
    #
    # The output/result is a refreshed array of input args/opts which
    # is what should be passed as input to the module pipelines.
    #
    # By default unrecognised args are added to the result set but
    # it may be required to raise an error for such args and for
    # this purpose we use a ERROR_ON_UNKNOWN_OPT global variable.

    local ERROR_ON_UNKNOWN_OPT=${ERROR_ON_UNKNOWN_OPT:-false}

    while (($# > 0)); do
        case "$1" in
            --charm-channel)
                MASTER_OPTS[CHARM_CHANNEL]="$2"
                shift
                ;;
            --model-config)
                if [ -z "${MASTER_OPTS[MODEL_CONFIG]}" ]; then
                    MASTER_OPTS[MODEL_CONFIG]="$2"
                else
                    MASTER_OPTS[MODEL_CONFIG]+=" $2"
                fi
                shift
                ;;
            --name|-n)
                # give bundle set a name and store under named dir
                MASTER_OPTS[BUNDLE_NAME]="${2%%:*}"
                if [[ $2 =~ ":" ]]; then
                    MASTER_OPTS[CLOUD_NAME]="${2##*:}"
                fi
                shift
                ;;
            --list-overlays)
                list_overlays
                exit
                ;;
            --release-name)
                MASTER_OPTS[TARGET_RELEASE_NAME]="$2"
                shift
                ;;
            --create-model|--defaults|--list|--replay|--run|--use-stable-charms)
                # boolean stubs - use has_opt()
                ;;
            --series|-s)
                # stub - use get_series()
                shift
                ;;
            --release|-r)
                # stub - use get_release()
                shift
                ;;
            --pocket|-p)
                # stub - use get_pocket()
                shift
                ;;
            --vip-addr-start)
                MASTER_OPTS[VIP_ADDR_START]="$2"
                shift
                ;;
            --revision-info)
                if (( $# < 2 )) || ! [ -r "$2" ]; then
                    echo "Missing or invalid bundle file path"
                    exit 1
                fi
                readarray -t temp < <("$MOD_DIR/../tools/parse-bundle.py" --get-charms $2)
                if ((${#temp[@]})); then
                    for line in "${temp[@]}"; do
                        read -a temp -r <<< ${line}
                        MASTER_OPTS[CHARM_REVISIONS.${temp[0]}]=${temp[1]}
                    done
                    echo -e "INFO: enabling stable charms since version info provided\n"
                    CACHED_STDIN=( "${CACHED_STDIN[@]}" --use-stable-charms )
                fi
                shift
                ;;
            --debug)
                # stub
                ;;
            -h|--help)
                _usage
                exit 0
                ;;
            *)
                if $ERROR_ON_UNKNOWN_OPT; then
                    echo "ERROR: invalid input '$1'"
                    _usage
                    exit 1
                fi
                FILTERED+=( $1 )
                ;;
        esac
        shift
    done
}
# Update $@ with filtered set of opts
filter_master_opts ${CACHED_STDIN[@]}
set -- ${FILTERED[@]}

has_excl_passthrough_opt ()
{
    # the existence of any one of these overrides any other input.
    for opt in --list --list-overlays --replay --help; do
        if has_opt $opt; then
            return 0
        fi
    done
    return 1
}

get_optval ()
{
    local opt=$1
    _f () {
    while (($#)); do
        if [ "$1" = "$opt" ]; then
            echo $2
        fi
        shift
    done
    }
    _f ${CACHED_STDIN[@]}
}

get_param()
{
    # Description: function first checks $opt to see if it has a :<value>
    #              suffix and if it does, sets MOD_PARAMS[key]=value. As
    #              a fallback then checks if key has an existing value based
    #              on prior input and if not user input is requested with
    #              message displayed. If a default is available, it is used to
    #              pre-fill the request field.
    #
    # @arg: opt - stdin opt arg
    # @arg: key - internal state key used to store value persistently
    # @arg: msg - message to display

    local opt=$1
    local key=$2
    local msg=$3
    local default="${MOD_PARAMS[$key]}"
    local val
    local current

    { has_opt --replay || has_opt --defaults; } && return

    # ensure message has a space at end
    if [ -n "$msg" ] && [ "${msg: -1}" != " " ]; then msg="$msg "; fi

    val=${opt#*:}
    if [ -z "$val" ] || [[ "$val" == "$opt" ]]; then
        current="`get_bundle_existing_config $key`"
        [ -z "$current" ] && [ -n "$default" ] && current=$default
        read -e -p "$msg" -i "$current" val
    fi
    [ -z "$val" ] || MOD_PARAMS[$key]="$val"
}


get_units()
{
    local opt=$1
    local key=$2
    local default=$3

    # format we are looking for is --opt:val
    local val=${opt#*:}
    if [ -z "$val" ] || [[ "$val" == "$opt" ]]; then
        val="$default"
    fi
    MOD_PARAMS[$key]="$val"
}

has_series ()
{
    while (($#)); do
        if [ "$1" = "-s" ] || [ "$1" = "--series" ]; then
             return 0
        fi
        shift
    done
    return 1
}

get_series ()
{
    _get () {
    while (($#)); do
        if [ "$1" = "-s" ] || [ "$1" = "--series" ]; then
             echo $2
             return 0
        fi
        shift
    done
    }
    r="`_get ${CACHED_STDIN[@]}`"
    [ -n "$r" ] || r="$DEFAULT_SERIES"
    echo $r
}

get_release ()
{
    _get () {
        while (($#)); do
            if [ "$1" = "-r" ] || [ "$1" = "--release" ]; then
                 echo $2
                 return 0
            fi
            shift
        done
    }
    _get ${CACHED_STDIN[@]}
}

get_pocket ()
{
    _get () {
        while (($#)); do
            if [ "$1" = "-p" ] || [ "$1" = "--pocket" ]; then
                 echo $2
                 return 0
            fi
            shift
        done
    }
    _get ${CACHED_STDIN[@]}
}

get_uca_release ()
{
    local r=`get_release`
    local s=`get_series`
    # no release means its lts so no uca
    [ -n "$r" ] || return
    # lts s+r means no uca
    ltsmatch "$s" "$r" && return
    # else its uca
    echo $release
}

cache ()
{
    # ensure cached opts contains any new ones
    declare -A dict
    for e in ${CACHED_STDIN[@]}; do dict[$e]=false; done
    for e in $@; do [ -n ${dict[$e]:-""} ] || CACHED_STDIN+=( $e ); done
}

has_opt ()
{
    local opt="$1"
    _f () {
        while (($# > 0))
        do
            [[ "$1" = $opt ]] && return 0
            shift
        done
        return 1
    }
    _f ${CACHED_STDIN[@]}
    return $?
}

conflicts_with ()
{
    local opt="$1"
    shift
    for conflict in $@; do
        `has_opt $conflict` || continue
        echo "ERROR: you cannot use $opt with $conflict"
        exit 1
    done
}

assert_min_series ()
{
    local min="$1"
    local s=`get_series`

    [ -n "$s" ] || s=`get_series ${CACHED_STDIN[@]}`
    [[ "$s" < "$min" ]] || return 0
    echo "Min series '$min' required (currently using '$s')" 1>&2
    exit 1
}

assert_min_release ()
{
    local min="$1"
    local feature_name="$2"
    local r=`get_release`

    [ -n "$r" ] || r=${lts[`get_series ${CACHED_STDIN[@]}`]:-${nonlts[`get_series ${CACHED_STDIN[@]}`]:-""}}
    [[ "$r" < "$min" ]] || return 0
    echo "Min release '$min' required to be able to use $feature_name (currently using '$r')" 1>&2
    exit 1
}

has_min_release ()
{
    return $(assert_min_release $1 "" &>/dev/null)
}

has_min_series ()
{
    # Return true if provided series <= --series
    #
    # This is a tricky thing to do since series names do not increase
    # alphabetically (they wrapped between Zesty and Aardvark), so it takes
    # a bit more logic to get right.

    local min_series="$1"
    local series="`get_series`"
    local match=false
    local lts_arr=()
    local all_series=()

    # First get ordered lists of each
    readarray -t ordered<<<`echo -n ${!lts_order[@]}| tr ' ' '\n'| sort -n| tr '\n' ' '`
    for o in ${ordered[@]}; do
        lts_arr+=( ${lts_order[$o]} )
    done
    readarray -t nonlts_arr<<<"`echo -n ${!nonlts[@]}| tr ' ' '\n' | sort`"

    # Now create full list
    i=0
    j=0
    for ((n=1;n<${#lts_arr[@]};n+=1)); do
        curr=${lts_arr[$n]}
        prev=${lts_arr[$((n-1))]}
        ((n==1)) && all_series+=( $prev )

        if [[ "$curr" > "${lts_arr[-1]}" ]] || [[ "$curr" < "${nonlts_arr[$j]}" ]]; then
            all_series+=( $curr )
        else
            (($j < ${#nonlts_arr[@]})) || break
            while [[ "$curr" > "${nonlts_arr[$j]}" ]]; do
                all_series+=( ${nonlts_arr[$j]} )
                (($j < ${#nonlts_arr[@]}-1)) || break
                ((j++))
            done
            all_series+=( $curr )
            while [[ "$curr" < "${nonlts_arr[$j]}" ]]; do
                all_series+=( ${nonlts_arr[$j]} )
                (($j < ${#nonlts_arr[@]}-1)) || break
                ((j++))
            done
        fi
    done

    for s in ${all_series[@]}; do
        if [ "$s" == "$series" ]; then
            [ "$s" == "$min_series" ] && return 0
            $match && return
        elif [ "$s" == "$min_series" ]; then
            match=true
        fi
    done

    return 1
}

ltsmatch ()
{
    local series="$1"
    local release="$2"

    [ -n "$release" ] || return 0
    for s in ${!lts[@]}; do
        [ "$s" = "$series" ] && [ "${lts[$s]}" = "$release" ] && return 0
    done
    return 1
}

nonltsmatch ()
{
    local series="$1"
    local release="$2"

    [ -n "$release" ] || return 0
    for s in ${!nonlts[@]}; do
        [ "$s" = "$series" ] && [ "${nonlts[$s]}" = "$release" ] && return 0
    done

    return 1
}

ost_series_autocorrect ()
{
    local series="$1"
    local release="$2"

    if [ -n "$release" ] && ! ltsmatch "$series" "$release" && \
            ! nonltsmatch "$series" "$release"; then
        num_rels=${#lts_releases_sorted[@]}
        newseries=""
        for r in ${lts_releases_sorted[@]}; do
            if [[ "$release" > "$r" ]]; then
                newseries=${lts_rev[$r]}
                break
            fi
        done

        # ensure correct series
        if ! has_series; then
            if ! [ "$series" = "$newseries" ]; then
                echo "Series auto-corrected from '$series' to '$newseries'" 1>&2
            fi
        fi
        series=$newseries
    fi
    echo $series
}

ost_release_autocorrect ()
{
    local series="$1"
    local release="$2"

    # Attempt to auto-correct series/release name combination errors
    if [ -z "$release" ] || { `ltsmatch "$series" "$release"` || \
            `nonltsmatch "$series" "$release"`; }; then
        release=${lts[$series]:-${nonlts[$series]:-}}
        if [ -z "$release" ]; then
            echo "No release found for series '$series'" 1>&2
            exit 1
        fi
    fi
    echo $release
}

# Requires APP_RELEASE_NAMES set by module generate-bundle.sh
get_app_release_name ()
{
    local ubuntu_release="$1"
    local release_name=

    [ -n "$release" ] || return 0
    readarray -t names_sorted_asc<<<"`echo ${!APP_RELEASE_NAMES[@]}| \
                                            tr ' ' '\n'| sort`"
    for name in ${names_sorted_asc[@]}; do
        rel=${APP_RELEASE_NAMES[$name]}
        if ! [[ "$rel" > "$ubuntu_release" ]]; then
            release_name=$name
        fi
    done
    echo $release_name
    return 0
}

trap_help ()
{
    local i=0
    while ((i < ${#CACHED_STDIN[@]})); do
        case "${CACHED_STDIN[$((i++))]}" in
            -h|--help)
                _usage
                exit 0
                ;;
        esac
    done
}

get_bundle_state_root ()
{
    echo $MOD_DIR/b
}

get_bundle_state_dir ()
{
    local bundle_name="${MASTER_OPTS[BUNDLE_NAME]}"
    local subdir="/$bundle_name"
    [ -n "$bundle_name" ] || subdir=''
    echo `get_bundle_state_root`$subdir
}

get_bundle_existing_config ()
{
    local key="$1"
    local conf=`get_bundle_state_dir`/config
    [ -r "$conf" ] || return 0
    sed -r "s/^$key: \"(.+)\".*/\1/g;t;d" $conf
}

# get cli model name if available since it might not have been created yet.
get_juju_model ()
{
    if `has_opt --create-model`; then
        local name="${MASTER_OPTS[BUNDLE_NAME]}"
        if [ -n "$name" ]; then
            echo $name
        fi
    else
        juju list-models 2>/dev/null| sed -r 's/^(.+)\* .+/\1/g;t;d'
    fi
}

in_model_context ()
{
    [ -n "${MASTER_OPTS[BUNDLE_NAME]}" ] && \
        juju list-models| egrep -q "^${MASTER_OPTS[BUNDLE_NAME]}\* "
}

model_exists ()
{
    [ -n "${MASTER_OPTS[BUNDLE_NAME]}" ] && \
        juju list-models| egrep -q "^${MASTER_OPTS[BUNDLE_NAME]} "
}

ensure_model ()
{
    # if requested to create model, ensure this is done and if model exists
    # ensure we switch context to it.
    if has_opt --create-model; then
        if in_model_context; then
            echo -e "Juju model '${MASTER_OPTS[BUNDLE_NAME]}' already exists and is the current context - skipping create\n"
        elif model_exists; then
            echo "Juju model '${MASTER_OPTS[BUNDLE_NAME]}' already exists but is not the current context - switching context"
            juju switch ${MASTER_OPTS[BUNDLE_NAME]}
            echo ""
        else
            echo "Creating Juju model ${MASTER_OPTS[BUNDLE_NAME]}"
            juju add-model ${MASTER_OPTS[BUNDLE_NAME]} ${MASTER_OPTS[CLOUD_NAME]}
            echo ""
        fi
    fi
}

update_from_charm_config ()
{
    # If no value provided on cli (opt:val) then check if charm already has a
    # value and inject that into cli opt.

    local opt="$1"
    local charm="$2"
    local charm_config_opt="$3"
    local value=

    # If the opt already contains user-provided value then use that.
    if ! [ "${opt#*:}" = "$opt" ]; then
        echo $opt
        return
    fi

    if in_model_context; then
        value="`juju config $charm $charm_config_opt 2>/dev/null`" || true
        [ -n "$value" ] && opt="$1:$value"
    fi

    echo $opt
}

if has_opt --debug; then
    PS4='+(${BASH_SOURCE##*/}:${LINENO}) ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
    set -x
fi

pocket=`get_pocket`
# get cli provided values or fallback to default
series=`get_series`
release=`get_release`

# The following is openstack specific but applies to multiple bundle
# modules so putting it here.
series=`ost_series_autocorrect "$series" "$release"`
release=`ost_release_autocorrect "$series" "$release"`
if ! ltsmatch "$series" "$release" && ! nonltsmatch "$series" "$release" ; then
    source="cloud:${series}-${release}"
else
    source=""
fi
if [ -n "$pocket" ]; then
    if [ -n "$source" ]; then
        source="${source}\/${pocket}"
    else
        source="$pocket";
    fi
fi
if [ "$source" = "proposed" ]; then
    os_origin="distro-proposed"
else
    os_origin="$source"
fi

print_msgs ()
{
    if ((${#MOD_MSGS[@]})); then
        echo ""
        for m in "${MOD_MSGS[@]}"; do
            echo -e "$m"
        done
        echo ""
        read -p "Hit [ENTER] to continue"
        echo ""
    fi
}

get_local_upstream_dns ()
{
    local server="`systemd-resolve --status 2>/dev/null| sed -r 's/\s+DNS Servers:\s+([[:digit:]]+)/\1/g;t;d'`"
    (($?==0)) && echo $server && return 0
    echo "10.198.200.1"  # stsstack upstream dns
}
