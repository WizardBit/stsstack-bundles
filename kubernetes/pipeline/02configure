#!/bin/bash -eu
# Global variables are first defined in 00setup and module
# dependencies are defined in 01import-config-defaults
#
# All overlay/bundle variables (MOD_PARAMS) defaults must go into
# the <module>/module_defaults file.


# default for current stable is to use containerd
# See https://ubuntu.com/kubernetes/docs/container-runtime
if ! has_opt --docker; then
    set -- $@ --containerd && cache $@
fi

check_hacluster_channel ()
{
    local channel=${MOD_PARAMS[__CHARM_CHANNEL__]}
    [ -n "$channel" ] || channel="${MASTER_OPTS[CHARM_CHANNEL]}"
    if [ -n "$channel" ] && [ "$channel" != "stable" ]; then
        # NOTE(dosaboy): https://bugs.launchpad.net/juju/+bug/1832873
        MOD_MSGS+=( "\nIMPORTANT: you are using the $channel charm channel but hacluster is not published to that channel. Either switch to stable channel or post-upgrade hacluster to stable channel.\n" )
    fi
}

# default overlay setup
MOD_OVERLAYS+=(
    "etcd.yaml"
    "etcd-easyrsa.yaml"
    "easyrsa.yaml"
    "k8s-etcd.yaml"
)
if ! has_opt --master-ha* && ! has_opt --lb-octavia; then
    MOD_OVERLAYS+=( "k8s-lb.yaml"  )
fi
# default to flannel cni
if ! has_opt --calico && ! has_opt --canal; then
    MOD_OVERLAYS+=( "k8s-cni-flannel.yaml" )
fi
if ! has_opt --vault*; then
    MOD_OVERLAYS+=( "k8s-easyrsa.yaml" )
    if ! `has_opt '--lb-octavia'`; then
        MOD_OVERLAYS+=( "k8s-lb-easyrsa.yaml" )
    fi
fi

# See https://bugs.launchpad.net/juju/+bug/1849636 for reason why we
# need min 2.7
if ! has_opt --no-trust && [[ ! "$JUJU_VERSION" < "2.7" ]]; then
    MOD_OVERLAYS+=( "k8s-openstack-integrator-trust.yaml" )
    JUJU_DEPLOY_OPTS=" --trust"
fi

# Skip processing input if it includes exclusive passthrough options
! has_excl_passthrough_opt && \
while (($# > 0))
do
    case "$1" in
        --k8s-channel)  #__OPT__type:<str>
            # which Kubernetes channel to set on deployment
            MOD_PARAMS[__K8S_CHANNEL__]="$2"
            shift
            ;;
        --ceph)
            MOD_OVERLAYS+=( "ceph.yaml" )
            MOD_OVERLAYS+=( "k8s-ceph.yaml" )
            # NOTE: force stable since these charms are not published to edge
            MOD_PARAMS[__CHARM_CHANNEL__]=stable
            ;;
        --ceph-proxy)
            MOD_PARAMS[__CEPH_INTERFACE__]='ceph-proxy'
            MOD_OVERLAYS+=( "ceph-proxy.yaml" )
            MOD_MSGS+=("NOTE: once ceph has finished deploying do the following: juju config admin-key=<key> fsid=<fsid> monitor-hosts=<mon-addr-list>'")
            MOD_MSGS+=( "Example: juju config ceph-proxy admin-key=AQALEzleKLCNDBAAxrOY8WbxF2B7lDx0TaswGA== fsid=e5e6aee2-4719-11ea-8264-fa163e50d5d1 monitor-hosts='10.5.0.11:6789 10.5.0.12:6789 10.5.0.13:6789'" )
            ;;
        --ceph-fs)
            MOD_OVERLAYS+=( "ceph-fs.yaml" )
            ;;
        --ceph-fs-ha*)
            get_units $1 __NUM_CEPH_FS_UNITS__ 3
            MOD_OVERLAYS+=( "ceph-fs.yaml" )
            set -- $@ --ceph-fs && cache $@
            ;;
        --etcd-ha*)
            get_units $1 __NUM_ETCD_UNITS__ 3
            ;;
        --containerd)
            conflicts_with $1 --docker
            MOD_OVERLAYS+=( "k8s-containerd.yaml" )
            ;;
        --calico)
            conflicts_with $1 --canal
            MOD_OVERLAYS+=( "k8s-cni-calico.yaml" )
            ;;
        --canal)
            conflicts_with $1 --calico
            MOD_OVERLAYS+=( "k8s-cni-canal.yaml" )
            ;;
        --docker)
            conflicts_with $1 --containerd
            MOD_OVERLAYS+=( "k8s-docker.yaml" )
            ;;
        --docker-registry)
            MOD_OVERLAYS+=( "k8s-docker-registry.yaml" )
            if has_opt --vault*; then
                MOD_OVERLAYS+=( "k8s-vault-docker-registry.yaml" )
            else
                MOD_OVERLAYS+=( "k8s-easyrsa-docker-registry.yaml" )
            fi
            MOD_MSGS+=( "Execute tools/configure_docker_registry.sh to upload the images onto the docker registry and setting image registry of the cluster to point to docker registry")
            ;;
        --e2e)
            MOD_OVERLAYS+=( "k8s-e2e.yaml" )
            if ! has_opt --vault*; then
                MOD_OVERLAYS+=( "k8s-e2e-easyrsa.yaml" )
            else
                MOD_OVERLAYS+=( "k8s-e2e-vault.yaml" )
            fi
            ;;
        --keystone)
            MOD_OVERLAYS+=( "keystone.yaml" )
            MOD_OVERLAYS+=( "k8s-keystone.yaml" )
            # NOTE: this is (should be) the same across all modules using mysql
            if has_min_series focal; then
                # There is no Focal support for percona-cluster
                MOD_OVERLAYS+=( "mysql-innodb-cluster.yaml")
            else
                MOD_OVERLAYS+=( "mysql.yaml" )
            fi
            ;;
        --lb-ha-hacluster*|--lb-ha-keepalived*)
            conflicts_with $1 --lb-octavia
            if has_opt --master-ha*; then
                echo "ERROR: you can't do --master-ha and ${1%%:*} at the same time."
                exit 1
            fi
            get_units $1 __NUM_K8S_LB_UNITS__ 3
            if has_opt --lb-ha-keepalived*; then
                MOD_OVERLAYS+=( "k8s-lb-ha-keepalived.yaml" )
            else
                MOD_OVERLAYS+=( "k8s-lb-ha-hacluster.yaml" )
                check_hacluster_channel
            fi
            ;;
        --lb-octavia)
            conflicts_with $1 '--lb-ha-hacluster*'
            conflicts_with $1 '--lb-ha-keepalived*'
            MOD_OVERLAYS+=( "k8s-octavia-lb.yaml" )
            ;;
        --master-ha*)
            if has_opt --lb-ha*; then
                echo "ERROR: you can't do --lb-ha and --master-ha at the same time."
                exit 1
            fi
            get_units $1 __NUM_K8S_MASTER_UNITS__ 3
            MOD_OVERLAYS+=( "k8s-master-ha.yaml" )
            check_hacluster_channel
            ;;
        --vault)
            MOD_OVERLAYS+=( "vault.yaml" )
            MOD_OVERLAYS+=( "mysql.yaml" )
            MOD_OVERLAYS+=( "k8s-vault.yaml" )
            has_opt --ceph && MOD_OVERLAYS+=( "vault-ceph.yaml" )
            # NOTE: force stable since these charms are not published to edge
            MOD_PARAMS[__CHARM_CHANNEL__]=stable
            ;;
        --etcd-channel)  #__OPT__type:<str>
            MOD_PARAMS[__ETCD_SNAP_CHANNEL__]=$2
            shift
            ;;
        --vault-ha*)
            get_units $1 __NUM_VAULT_UNITS__ 3
            MOD_OVERLAYS+=( "vault-ha.yaml" )
            MOD_OVERLAYS+=( "vault-etcd.yaml" )
            set -- $@ --vault && cache $@
            ;;
        --num-workers)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_K8S_WORKER_UNITS__]=$2
            shift
            ;;
        --num-masters)  #__OPT__type:<int>
            MOD_PARAMS[__NUM_K8S_MASTER_UNITS__]=$2
            shift
            ;;
        *)
            echo "ERROR: invalid input '$1'"
            _usage
            exit 1
            ;;
    esac
    shift
done

# We do this here in case there was a need to override.
charm_channel="${MOD_PARAMS[__CHARM_CHANNEL__]}"
if [ -n "$charm_channel" ]; then
    set -- $@ --charm-channel $charm_channel && cache $@
    MOD_PASSTHROUGH_OPTS+=( --charm-channel $charm_channel )
fi

target=$series
[ -z "$pocket" ] || target=${target}-$pocket
target=${target}:${MOD_PARAMS[__K8S_CHANNEL__]}
MOD_PASSTHROUGH_OPTS+=( --release-name $target )

if ! has_opt --*-ha*; then
    if [ -r ~/novarc ]; then
        echo "INFO: juju model will use network with port security enabled."
        OS_PROJECT_NAME=`sed -r 's/.+OS_PROJECT_NAME=(.+)/\1/g;t;d' ~/novarc`
        MOD_PASSTHROUGH_OPTS+=( --model-config "network=${OS_PROJECT_NAME}_port_sec_enabled" )
    else
        echo "WARNING: ~/novarc not found - unable to setup octavia tenant network"
    fi
fi

print_msgs
